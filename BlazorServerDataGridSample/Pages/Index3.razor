@page "/"
@page "/index3"

@inject ISalesDetailService SalesDetailService;
@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<PageTitle>DataGrid</PageTitle>
<h3>Ignite UI for Blazor New Data Grid Sample</h3>

@if (_salesDetails != null)
{
    <div class="container vertical">
        <div class="container vertical fill">


            <br>
            @if (message != "")
            {
                <div class="alert alert-success" role="alert">
                    @message
                </div>
                <br>
            }

            @if (errorMessage != "")
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
                <br>
            }

            <EditForm Model="newSalesDetail" OnValidSubmit="AddNewDataButtonClick">
                <DataAnnotationsValidator />

                <div class="d-flex my-2">
                    <div class="d-flex flex-column me-2">
                        <label for="SlipNumber" class="form-label">伝票番号</label>
                        <InputNumber @bind-Value="newSalesDetail.SlipNumber" class="form-control" />
                        <ValidationMessage For="@(() => newSalesDetail.SlipNumber)" />
                    </div>
                    <br>
                    <div class="d-flex flex-column  me-2">
                        <label for="RowNumber" class="form-label">行番号</label>
                        <InputNumber @bind-Value="newSalesDetail.RowNumber" class="form-control" />
                        <ValidationMessage For="@(() => newSalesDetail.RowNumber)" />
                    </div>
                </div>
                <div class="d-flex my-2">
                    <div class="d-flex flex-column me-2">
                        <label for="ItemCode" class="form-label">商品コード</label>
                        <InputText @bind-Value="newSalesDetail.ItemCode" class="form-control" />
                        <ValidationMessage For="@(() => newSalesDetail.ItemCode)" />
                    </div>
                    <br>
                    <div class="d-flex flex-column  me-2">
                        <label for="ItemName" class="form-label">商品名</label>
                        <InputText @bind-Value="newSalesDetail.ItemName" class="form-control" />
                        <ValidationMessage For="@(() => newSalesDetail.ItemName)" />
                    </div>
                </div>
                <div class="d-flex my-2">
                    <div class="d-flex flex-column  me-2">
                        <label for="Quantity" class="form-label">数量</label>
                        <InputNumber @bind-Value="newSalesDetail.Quantity" class="form-control" />
                        <ValidationMessage For="@(() => newSalesDetail.Quantity)" />
                    </div>
                    <div class="d-flex flex-column  me-2">
                        <label for="UnitPrice" class="form-label">単価</label>
                        <InputNumber @bind-Value="newSalesDetail.UnitPrice" class="form-control" />
                        <ValidationMessage For="@(() => newSalesDetail.UnitPrice)" />
                    </div>
                    <div class="d-flex flex-column  me-2">
                        <label for="Amount" class="form-label">金額</label>
                        <input value="@Amount" class="form-control" type="number" disabled />
                    </div>
                    <div class="d-flex flex-column  me-2">
                        <label for="SalesTax" class="form-label">消費税</label>
                        <input value="@SalesTax" class="form-control" type="number" disabled />
                    </div>
                </div>

                <br>

                <div class="d-flex bd-highlight mb-3">
                    <button type="submit" class="btn btn-primary">Add Data</button>
                    <button type="button" class="btn btn-secondary ms-auto p-2 bd-highlight" @onclick="UpdateDetailsDataButtonClick">Update Details</button>
                </div>

            </EditForm>

            <br>

            <IgbGrid Data="_salesDetails"
                 Height="500px"
                 AutoGenerate="false"
                 ValidationStatusChange="OnValidationStatusChange"
                 CellEdit="OnCellEdit"
                 CellEditEnter="OnCellEditEnter"
                 CellEditExit="OnCellEditExit"
                 @ref="_grid"
                 DisplayDensity="DisplayDensity.Compact">

                <IgbColumnLayout Header="Header"
                             Pinned="true">
                    <IgbColumn Field="SlipNumber"
                           Width="100px"
                           RowStart="1"
                           RowEnd="2"
                           ColStart="1"
                           Header="伝票番号">

                        <BodyTemplate>
                            <input type="number" class="form-control" value="@context.Cell.Value" @oninput="(args => OnCellInput(context, row => row.SlipNumber = int.TryParse(args.Value?.ToString(), out var n) ? n: 0))" style="position:absolute; top:0; left:0; bottom:0; right:0;" />
                        </BodyTemplate>

                    </IgbColumn>
                    <IgbColumn Field="RowNumber"
                           Width="100px"
                           RowStart="1"
                           RowEnd="2"
                           ColStart="2"
                           Header="行番号">
                        <BodyTemplate>
                            <input type="number" class="form-control" value="@context.Cell.Value" @oninput="(args => OnCellInput(context, row => row.RowNumber = int.TryParse(args.Value?.ToString(), out var n) ? n: 0))" style="position:absolute; top:0; left:0; bottom:0; right:0;" />
                        </BodyTemplate>
                    </IgbColumn>
                </IgbColumnLayout>

                <IgbColumnLayout Header="Detail" Pinned="true">

                    <IgbColumn Field="ItemCode"
                           RowStart="1"
                           ColStart="1"
                           Header="商品コード">
                        <BodyTemplate>
                            <input type="text" class="form-control" value="@context.Cell.Value" @oninput="(args => OnCellInput(context, row => row.ItemCode = args.Value?.ToString()!))" style="position:absolute; top:0; left:0; bottom:0; right:0;" />
                        </BodyTemplate>
                    </IgbColumn>
                    <IgbColumn RowStart="1"
                           ColStart="2"
                           Width="90px"
                           Header="">
                        <BodyTemplate>
                            <button class="btn btn-primary" @onclick="() => sampleDialog!.ShowDialog(context, _salesDetails)">検索</button>
                        </BodyTemplate>
                    </IgbColumn>
                    <IgbColumn Field="ItemName"
                           RowStart="2"
                           RowEnd="2"
                           ColStart="1"
                           ColEnd="3"
                           Header="商品名">
                        <BodyTemplate>
                            <input type="text" class="form-control" value="@context.Cell.Value" @oninput="(args => OnCellInput(context, row => row.ItemName = args.Value?.ToString()!))" style="position:absolute; top:0; left:0; bottom:0; right:0;" />
                        </BodyTemplate>
                    </IgbColumn>


                    <IgbColumn Field="Quantity"
                           DataType="GridColumnDataType.Number"
                           RowStart="1"
                           ColStart="3"
                           Header="数量"
                           Width="100px">
                        <BodyTemplate>
                            <input type="number" class="form-control" value="@context.Cell.Value" @oninput="(args => OnCellInput(context, row => row.Quantity = int.TryParse(args.Value?.ToString(), out var n) ? n: 0))" style="position:absolute; top:0; left:0; bottom:0; right:0; text-align: right;" />
                        </BodyTemplate>
                    </IgbColumn>

                    <IgbColumn Field="UnitPrice"
                           DataType="GridColumnDataType.Number"
                           RowStart="2"
                           ColStart="3"
                           Header="単価">
                        <BodyTemplate>
                            <input type="number" class="form-control" value="@context.Cell.Value" @oninput="(args => OnCellInput(context, row => row.UnitPrice = int.TryParse(args.Value?.ToString(), out var n) ? n: 0))" style="position:absolute; top:0; left:0; bottom:0; right:0; text-align: right;" />
                        </BodyTemplate>
                    </IgbColumn>

                    <IgbColumn Field="Amount"
                           DataType="GridColumnDataType.Number"
                           RowStart="1"
                           ColStart="4"
                           Header="金額"
                           Width="100px">
                        <BodyTemplate>
                            <input type="number" class="form-control igx-grid__td--number" value="@context.Cell.Value" disabled style="position:absolute; top:0; left:0; bottom:0; right:0; text-align: right;" />
                        </BodyTemplate>
                    </IgbColumn>

                    <IgbColumn Field="SalesTax"
                           DataType="GridColumnDataType.Number"
                           RowStart="2"
                           ColStart="4"
                           Header="消費税"
                           Width="100px">
                        <BodyTemplate>
                            <input type="number" class="form-control" value="@context.Cell.Value" disabled style="position:absolute; top:0; left:0; bottom:0; right:0; text-align: right;" />
                        </BodyTemplate>
                    </IgbColumn>
                </IgbColumnLayout>

                <IgbColumnLayout Header="CustomTemplate" Pinned="true">

                    <IgbColumn Field="CustomerInfo"
                           RowStart="1"
                           ColStart="1"
                           Header="得意先情報">
                        <BodyTemplate>
                            <input class="form-control" value="@GetFieldValue(context, row => row.CustomerInfo1)" @oninput="(args => OnCellInput(context, row => row.CustomerInfo1 = args.Value?.ToString()!))">
                            <input class="form-control" value="@GetFieldValue(context, row => row.CustomerInfo2)" @oninput="(args => OnCellInput(context, row => row.CustomerInfo2 = args.Value?.ToString()!))">
                        </BodyTemplate>
                    </IgbColumn>

                    <IgbColumn Field="ConstructionNumber"
                           RowStart="1"
                           ColStart="2"
                           Header="工事番号">
                        <BodyTemplate>
                            <div class="mimic-inlineditor-container">

                                <div class="mimic-inlineditor-cover">
                                    <div>
                                        @GetFieldValue(context, row => row.ConstructionNumber1)
                                        -
                                        @GetFieldValue(context, row => row.ConstructionNumber2)
                                    </div>
                                </div>

                                <div class="d-flex">
                                    <input style="width:130px" class="form-control" value="@GetFieldValue(context, row => row.ConstructionNumber1)" @oninput="(args => OnCellInput(context, row => row.ConstructionNumber1 = args.Value?.ToString()!))">
                                    &ensp; - &ensp;
                                    <input style="width:40px" class="form-control" value="@GetFieldValue(context, row => row.ConstructionNumber2)" @oninput="(args => OnCellInput(context, row => row.ConstructionNumber2 = args.Value?.ToString()!))">
                                </div>

                            </div>
                        </BodyTemplate>
                    </IgbColumn>
                </IgbColumnLayout>

                @*削除ボタン*@
                <IgbColumnLayout Header="DeleteButton"
                             Pinned="true">
                    <IgbColumn RowStart="1"
                           ColStart="1"
                           Width="90px"
                           Header="削除">
                        <BodyTemplate>
                            <button class="btn btn-danger" @onclick="() => OnClickCellRemove(context)">削除</button>
                        </BodyTemplate>
                    </IgbColumn>
                </IgbColumnLayout>
            </IgbGrid>

        </div>
    </div>

}

<SampleDialog @ref="sampleDialog"
              Title="商品検索画面"
              OKButtonCaption="OK"
              CancelButtonCaption="Cancel"
              ActionSelected="ActionSelected">
</SampleDialog>

@code {

    //検索ダイアログ関連
    private SampleDialog? sampleDialog;

    private void ActionSelected(ItemSearchResultViewModel dialogResult)
    {
        //編集内容をViewModelに反映する
        var updateData = _salesDetails[dialogResult.RowIndex];

        if (dialogResult.ItemCode! == "")
        {
            return;
        }

        //検索結果を反映
        updateData.ItemCode = dialogResult.ItemCode!;
        updateData.ItemName = dialogResult.ItemName!;
        updateData.UnitPrice = dialogResult.UnitPrice;
        updateData.Amount = Math.Ceiling(updateData.Quantity * updateData.UnitPrice);
        updateData.SalesTax = Math.Ceiling(updateData.Amount * 0.1M);

        //変更内容を反映
        _grid!.NotifyUpdateItem(_salesDetails, dialogResult.RowIndex, updateData);

        this.StateHasChanged();
    }


    //グリッド
    private IgbGrid? _grid;

    //新規データ登録用の初期値
    private readonly SalesDetailViewModel newSalesDetail = new SalesDetailViewModel
        {
            RowNumber = 1,
            ItemCode = "S003",
            ItemName = "商品3",
            Quantity = 12,
            UnitPrice = 535
        };

    public decimal Amount => Math.Ceiling(newSalesDetail.Quantity * newSalesDetail.UnitPrice);

    public decimal SalesTax => Math.Ceiling(Amount * 0.1M);

    //エラーメッセージ
    private string message = "";
    private string errorMessage = "";

    //グリッドのViewModel
    private List<SalesDetailViewModel> _salesDetails = new();

    //登録済みのデータが削除されたときにIdをひかえておく
    private HashSet<int> _removedIdList = new();

    //新規データ追加
    private void AddNewDataButtonClick()
    {
        message = "";
        errorMessage = "";

        var newRow = newSalesDetail.Clone();
        newRow.Amount = Amount;
        newRow.SalesTax = SalesTax;
        _salesDetails.Add(newRow);

        _grid?.NotifyInsertItem(_salesDetails, _salesDetails.Count - 1, newRow);

        newSalesDetail.RowNumber++;
    }

    //明細データの更新処理
    private async Task UpdateDetailsDataButtonClick()
    {
        //処理判定フラグ等の初期化
        message = "";
        errorMessage = "";

        try
        {
            await SalesDetailService.UpdateAllAsync(_salesDetails, _removedIdList);
        }
        catch (DbUpdateConcurrencyException ex)
        {
            errorMessage = ex.ToString();
            return;
        }

        //画面に更新成功の表示
        message = "更新に成功しました";
        this.StateHasChanged();
    }

    /// <summary>
    /// 初期化処理
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        //売上明細一覧データの取得
        _salesDetails = (await SalesDetailService.GetAllAsync()).ToList();

        //伝票番号の最大値
        newSalesDetail.SlipNumber = _salesDetails.Select(n => n.SlipNumber).DefaultIfEmpty(0).Max() + 1;
    }

    /// <summary>
    /// 行削除ボタン
    /// </summary>
    /// <param name="context"></param>
    private void OnClickCellRemove(IgbCellTemplateContext context)
    {
        var grid = context.Parent as IgbGrid;
        if (grid == null) return;

        var rowIndex = context.Cell.Id.RowIndex;

        if (rowIndex == -1) return;
        var removeData = _salesDetails[rowIndex];

        //削除されたIdを控えておく
        _removedIdList.Add(removeData.Id);

        _salesDetails.Remove(removeData);
        grid.NotifyRemoveItem(_salesDetails, rowIndex, removeData);
    }

    private string GetFieldValue(IgbCellTemplateContext context, Func<SalesDetailViewModel, string?> selector, string defaultValue = "")
    {
        var rowIndex = context.Cell.Id.RowIndex;
        if (rowIndex == -1) return defaultValue;
        var targetRow = _salesDetails[rowIndex];

        return selector(targetRow) ?? defaultValue;
    }

    private void OnCellInput(IgbCellTemplateContext context, Action<SalesDetailViewModel> setter)
    {
        var rowIndex = context.Cell.Id.RowIndex;
        var columnIndex = context.Cell.Id.ColumnID;

        if (rowIndex == -1) return;
        if (columnIndex == -1) return;

        var targetRow = _salesDetails[rowIndex];

        setter(targetRow);

        //金額、消費税の計算
        if (columnIndex == 7 || columnIndex == 8) //数量 or 単価
        {

            targetRow.Amount = Math.Ceiling(targetRow.Quantity * targetRow.UnitPrice);
            targetRow.SalesTax = Math.Ceiling(targetRow.Amount * 0.1M);
        }

        //変更内容を反映
        _grid!.NotifyUpdateItem(_salesDetails, rowIndex, targetRow);

        this.StateHasChanged();
    }

    //以下、GridのCellイベント
    private async Task OnValidationStatusChange(IgbGridValidationStatusEventArgs args)
    {
        Console.WriteLine(args);
        await Task.CompletedTask;
    }

    private async Task OnCellEdit(IgbGridEditEventArgs args)
    {
        Console.WriteLine(args);
        await Task.CompletedTask;
    }

    private async Task OnCellEditEnter(IgbGridEditEventArgs args)
    {
        Console.WriteLine(args);
        await Task.CompletedTask;
    }

    private async Task OnCellEditExit(IgbGridEditDoneEventArgs args)
    {

        //OnCellInputに処理を移行
        //try
        //{
        //    errorMessage = "";

        //    //対象のセルを特定
        //    var columnIndex = args.Detail.CellID.ColumnID;
        //    var rowIndex = args.Detail.CellID.RowIndex;

        //    //変更された値を取得する
        //    var parent = (IgbGridEditDoneEventArgsDetail)args.Detail.CellID.Parent;
        //    var newValue = parent.NewValue;

        //    //編集内容をViewModelに反映する
        //    var updateData = _salesDetails[rowIndex];

        //    if (columnIndex == 4) //商品コード
        //    {
        //        updateData.ItemCode = newValue.ToString()!;
        //    }

        //    if (columnIndex == 6) //商品名
        //    {
        //        updateData.ItemName = newValue.ToString()!;
        //    }


        //    if (columnIndex == 7) //数量
        //    {
        //        updateData.Quantity = decimal.Parse(newValue.ToString()!);
        //        updateData.Amount = Math.Ceiling(updateData.Quantity * updateData.UnitPrice);
        //        updateData.SalesTax = Math.Ceiling(updateData.Amount * 0.1M);
        //    }

        //    if (columnIndex == 8) //単価
        //    {
        //        updateData.UnitPrice = decimal.Parse(newValue.ToString()!);
        //        updateData.Amount = Math.Ceiling(updateData.Quantity * updateData.UnitPrice);
        //        updateData.SalesTax = Math.Ceiling(updateData.Amount * 0.1M);
        //    }

        //    //変更内容を反映
        //    _grid!.NotifyUpdateItem(_salesDetails, rowIndex, updateData);

        //    this.StateHasChanged();

        //}
        //catch (Exception ex)
        //{
        //    //検証のため、処理全体でエラー検知中
        //    errorMessage = ex.ToString();
        //}

        await Task.CompletedTask;
    }
}
